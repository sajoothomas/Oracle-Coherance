
import com.tangosol.net.AbstractInvocable;

public class FreeMemoryAgent extends AbstractInvocable {
	private static final long serialVersionUID = 1L;

	public void run() {
		Runtime rt = Runtime.getRuntime();
		setResult(rt.freeMemory());
	}
}

import com.tangosol.net.InvocationObserver;
import com.tangosol.net.Member;

public class MyInvocationObserver implements InvocationObserver {

	@Override
	public void invocationCompleted() {
		System.out.println("\nMyInvocationObserver processing completed\n");
	}

	@Override
	public void memberCompleted(Member member, Object result) {
		System.out.println("In Async Observer: Member: " + member + " Free: " + result);
	}

	@Override
	public void memberFailed(Member member, Throwable throwable) {}

	@Override
	public void memberLeft(Member member) {}

}


InvocationService is = (InvocationService)CacheFactory.getService("InvocationService");

Map<Member, Integer> freeMemMap = is.query(new FreeMemoryAgent(), null);

for (Map.Entry<Member, Integer> freeMem : freeMemMap.entrySet()) {
	System.out.println("Member: " + freeMem.getKey() + " Free: " + freeMem.getValue());
}

is.execute(new FreeMemoryAgent(), null, new MyInvocationObserver());
